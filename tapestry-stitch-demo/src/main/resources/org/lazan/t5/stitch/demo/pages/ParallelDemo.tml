<t:layout xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd" xmlns:p="tapestry:parameter">
	<h3>Parallel Rendering</h3>
	
	The <code>parallel</code> component works together with the <code>parallelContainer</code> to perform 
	work on thread pool. This is done by delaying the rendering of the body until later, allowing all workers defined 
	inside a <code>parallelContainer</code> to run at the same time using the 
	<a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/ioc/services/ParallelExecutor.html">ParallelExecutor</a>.
	Long running tasks can be performed by the <code>worker</code>, an instance of 
	<a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/ioc/Invokable.html">Invokable</a>.
	The worker will eventually return a result which populates a <code>binding</code> before rendering the body 
	of the <code>parallel</code> instance. It's important to note that the <code>worker</code> will NOT be invoked by the request
	thread so many thread scoped services will be null as it executes (eg the request and session etc).
	
	<h4>Parameters:</h4>
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Name</th>
				<th>Type</th>
				<th>Required</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>worker</td>
				<td><a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/ioc/Invokable.html">Invokable</a></td>
				<td>true</td>
				<td>A long running task which returns a value. This will be invoked in parallel</td>
			</tr>
			<tr>
				<td>binding</td>
				<td>Object</td>
				<td>true</td>
				<td>
					This will usually be a property defined in your page. 
					The property will be updated with the worker's result.
					The body of the parallel instance should reference the binding in some way
				</td>
			</tr>
		</tbody>
	</table>	

	<h3>Demo</h3>
	<p>
	In the example below, each odd row is rendered in parallel by a worker that pauses for ${pauseSeconds} seconds. 
	This causes the even rows to render before the odd rows. Placeholders are added for the odd rows which all render 
	in parallel after the body of the <code>parallelContainer</code> is rendered.
	</p>
	
	<t:stitch.parallelContainer>
		<table class="table table-bordered table-striped">
			<tr>
				<th>Value</th>
				<th>Render Order</th>
				<th>Rendered at</th>
			</tr>
			<tr t:type="loop" source="prop:['a','b','c','d','e','f','g']" index="rowIndex" value="rowValue">
				<t:if test="evenRow">
					<td>${rowValue}</td>
					<td>${renderOrder}</td>
					<td>${renderTime}</td>
				</t:if>
				<t:if test="!evenRow">
					<t:stitch.parallel worker="createRowWorker()" binding="rowValue">
						<td>${rowValue}</td>
						<td>${renderOrder}</td>
						<td>${renderTime}</td>
					</t:stitch.parallel>
				</t:if>
			</tr>	
		</table>
	</t:stitch.parallelContainer>
		
	Rendered ${workerCount} parallel workers with a combined work time of ${totalWorkSeconds} seconds 
	in ${renderSeconds} seconds using ${threadCount} threads. 	

	<h3>Source</h3>
	<t:stitch.tabGroup>
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/demo/pages/ParallelDemo.java" />
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/demo/pages/ParallelDemo.tml" />
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/components/Parallel.java" />
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/components/ParallelContainer.java" />
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/model/ParallelModel.java" />
		<t:stitch.codeTab source="classpath:org/lazan/t5/stitch/model/ParallelContainerModel.java" />
	</t:stitch.tabGroup>
</t:layout>